from dhooks import Webhook
import twitter
import logging
from pprint import pprint 
import requests
import re
from requests.exceptions import ChunkedEncodingError
from time import sleep
import traceback

api = twitter.Api(consumer_key=['yKNjPaKlb4RNne7FhESzJJyKk'],
                  consumer_secret=['edWYUdPs8CIr6x1qB3KSh8dMZCc2UCet1oeo0fUaYZhN8ccZKK'],
                  access_token_key=['22284610-PpCin7qMXJ4Y5HpNQWMmPFr6L1Hqen0z1PtsynUvH'],
                  access_token_secret=['NmEP8X6q3yc4aVMIP6i7Ce2nmeqCPpJzXh7AuLyNdtNRO'])

#logging.basicConfig(level=logging.INFO, format='[%(asctime)s] - [%(levelname)s]:: %(message)s')
#logging.info('Starting the bot...')

senua_webhook = Webhook('https://discordapp.com/api/webhooks/595561270657155092/fMShY_SYf8VUWtm3x3YBZ2BReYsmuLuOxz9ZzuVZ41EMS-hnIbkpuCFg5o-X0nMfGjYH')

warframe_alerts_account_id = '1344755923'
#for hook in [senua_webhook]:
 #   requests.post(hook, data={'content': 'Starting Alertz :robot:'})
while True:
    try:
        for tweet in api.GetStreamFilter(follow=[warframe_alerts_account_id]):
            #logging.info('Found New Tweet: {}'.format(tweet['text']))
            if int(tweet['user']['id']) == int(warframe_alerts_account_id):
            #logging.info('Handling @WarframeAlerts tweet...')
                if re.search('sortie', tweet['text'], re.IGNORECASE):
                    message = 'Daily Sortie :: ' + tweet['text']
                else:
                    message = tweet['text']
                senua_webhook.send(message)
                #for hook in [senua_webhook]:
                    #requests.post(hook, data={'content': message})
            else:
                pass
                #logging.info('Skipping tweet sent by {}'.format(tweet['user']['id']))
    except ChunkedEncodingError:
        pass
    #logging.error('Connection reset by peer!')
     #   sleep(60)
    except KeyboardInterrupt as e:
        #requests.post(senua_webhook, data={'content': 'Exiting gracefully...'})
        exit(0)
    except Exception as e:
        pass
        #requests.post(senua_webhook, data={'content': 'Unhandled exception:: {}'.format(e)})
        #logging.error(traceback.print_exc())
